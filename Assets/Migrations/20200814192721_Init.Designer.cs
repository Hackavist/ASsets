// <auto-generated />
using System;
using Assets.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Assets.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20200814192721_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6");

            modelBuilder.Entity("Assets.Models.DataModels.Asset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("AssetId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("AssetName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("AssetNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("AssetPictureBase64")
                        .HasColumnType("TEXT");

                    b.Property<string>("AssetPictureFormat")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("AssetStatus")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CalibrationCertificationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("CalibrationCertificationNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("CalibrationCertificationPictureBase64")
                        .HasColumnType("TEXT");

                    b.Property<string>("CalibrationCertificationPictureFormat")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrentLocation")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfPurchase")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("MonthsToDepreciation")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PMVCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("PlateSerialNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("PoNumber")
                        .HasColumnType("TEXT");

                    b.Property<double>("PurchaseCostOfAsset")
                        .HasColumnType("REAL");

                    b.Property<string>("ToolType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Assets");
                });

            modelBuilder.Entity("Assets.Models.DataModels.Repair", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("AssetId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("LaborAmount")
                        .HasColumnType("REAL");

                    b.Property<string>("Location")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RepairDate")
                        .HasColumnType("TEXT");

                    b.Property<double>("SparePartsAmount")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.ToTable("Repair");
                });

            modelBuilder.Entity("Assets.Models.DataModels.Repositions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("AssetId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("NewPosition")
                        .HasColumnType("TEXT");

                    b.Property<string>("OldPosition")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RepositionDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.ToTable("Repositions");
                });

            modelBuilder.Entity("Assets.Models.DataModels.Repair", b =>
                {
                    b.HasOne("Assets.Models.DataModels.Asset", "Asset")
                        .WithMany("Repairs")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Assets.Models.DataModels.Repositions", b =>
                {
                    b.HasOne("Assets.Models.DataModels.Asset", "Asset")
                        .WithMany("Repositions")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
